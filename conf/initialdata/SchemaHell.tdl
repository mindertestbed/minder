/**
 * Do your best to test!
 */


val protocol = "http"
val port = "9000"

val resources = Map[String, String](
  "schematron/deep/deeper/includer1.sch" -> (protocol + "://localhost:" + port + "/assets/schemaSamples/schematron/deep/deeper/includer1.sch"),
  "library/mainscheme/library.xsd" -> (protocol + "://localhost:" + port + "/assets/schemaSamples/library/mainscheme/library.xsd"),
  "books.xsd" -> (protocol + "://localhost:" + port + "/assets/schemaSamples/books.xsd"),
  "library.jar" -> (protocol + "://localhost:" + port + "/assets/schemaSamples/library.jar"),
  "library.zip" -> (protocol + "://localhost:" + port + "/assets/schemaSamples/library.zip"),
  "sample-book.xml" -> (protocol + "://localhost:" + port + "/assets/schemaSamples/sample-book.xml"),
  "sample-library-invalid.xml" -> (protocol + "://localhost:" + port + "/assets/schemaSamples/sample-library-invalid.xml"),
  "sample-library.xml" -> (protocol + "://localhost:" + port + "/assets/schemaSamples/sample-library.xml"),
  "schematron.jar" -> (protocol + "://localhost:" + port + "/assets/schemaSamples/schematron.jar"),
  "schematron.zip" -> (protocol + "://localhost:" + port + "/assets/schemaSamples/schematron.zip"),
  "simple-input-invalid.xml" -> (protocol + "://localhost:" + port + "/assets/schemaSamples/simple-input-invalid.xml"),
  "simple-input.xml" -> (protocol + "://localhost:" + port + "/assets/schemaSamples/simple-input.xml"),
  "simple.sch" -> (protocol + "://localhost:" + port + "/assets/schemaSamples/simple.sch")
)

/**********
  *******  XSD
  ******/

runAsRivet(() => {
  mustSucceed("Verify Simple Books", () => {
    val xsd = getAsset("books.xsd")
    val xml = getAsset("sample-book.xml")
    var report = verifyXsd(xsd(), xml())
    INFO(report)
    getResultForXSD(report)
  })
})

runAsRivet(() => {
  //test an valid zip
  mustSucceed("Verify xsd schema from a ZIP file", () => {
    val xsd = getAsset("library.zip")
    val xml = getAsset("sample-library.xml")
    val schema = schemaFromByteArray("library/mainscheme/library.xsd", xsd(), ArchiveType.ZIP);
    var report = verifyXsd(schema, xml())
    INFO(report)
    getResultForXSD(report)
  })

  //test an invalid zip
  mustFail("Fail an invalid xsd schema from a ZIP file", () => {
    val xsd = getAsset("library.jar")
    val xml = getAsset("sample-library-invalid.xml")
    //refer to the schema within the archive
    val schema = schemaFromByteArray("library/mainscheme/library.xsd", xsd(), ArchiveType.ZIP);
    var report = verifyXsd(schema, xml())
    INFO(report)
    getResultForXSD(report)
  })
})

runAsRivet(() => {
  //test an valid zip
  mustSucceed("Verify xsd schema from a JAR file", () => {
    val xsd = getAsset("library.jar")
    val xml = getAsset("sample-library.xml")
    val minderXsd = schemaFromByteArray("library/mainscheme/library.xsd", xsd(), ArchiveType.JAR);
    var report = verifyXsd(minderXsd, xml())
    INFO(report)
    getResultForXSD(report)
  })
  //test an invalid zip
  mustFail("Fail an invalid xsd schema from a JAR file", () => {
    val xsd = getAsset("library.jar")
    val xml = getAsset("sample-library-invalid.xml")
    //refer to the schema within the archive
    val schema = schemaFromByteArray("library/mainscheme/library.xsd", xsd(), ArchiveType.JAR);
    var report = verifyXsd(schema, xml())
    INFO(report)
    getResultForXSD(report)
  })
})


//-----


runAsRivet(() => {
  //Verify a schematron zip on a URL with valid XML
  mustSucceed("Verify a XSD zip on a URL with valid XML ", () => {
    val url = resources("library.zip")
    val xml = getAsset("sample-library.xml")
    val schema = schemaFromURL("library/mainscheme/library.xsd", url, ArchiveType.ZIP);
    var report = verifyXsd(schema, xml())
    INFO(report)
    getResultForXSD(report)
  })

  //test an invalid zip
  mustFail("Fail a XSD zip on a URL with an invalid XML ", () => {
    val url = resources("library.zip")
    val xml = getAsset("sample-library-invalid.xml")
    val schema = schemaFromURL("library/mainscheme/library.xsd", url, ArchiveType.ZIP);
    var report = verifyXsd(schema, xml())
    INFO(report)
    getResultForXSD(report)
  })
})

runAsRivet(() => {
  //Verify a schematron zip on a URL with valid XML
  mustSucceed("Verify a XSD JAR on a URL with valid XML ", () => {
    val url = resources("library.jar")
    val xml = getAsset("sample-library.xml")
    val schema = schemaFromURL("library/mainscheme/library.xsd", url, ArchiveType.JAR);
    var report = verifyXsd(schema, xml())
    INFO(report)
    getResultForXSD(report)
  })

  //test an invalid zip
  mustFail("Fail a XSD JAR on a URL with an invalid XML ", () => {
    val url = resources("library.jar")
    val xml = getAsset("sample-library-invalid.xml")
    val schema = schemaFromURL("library/mainscheme/library.xsd", url, ArchiveType.JAR);
    var report = verifyXsd(schema, xml())
    INFO(report)
    getResultForXSD(report)
  })
})


runAsRivet(() => {
  //Verify a schematron zip on a URL with valid XML
  mustSucceed("Verify an XSD on a URL with valid XML and includes ", () => {
    val url = resources("library/mainscheme/library.xsd")
    val xml = getAsset("sample-library.xml")
    var report = verifyXsd(url, xml())
    INFO(report)
    getResultForXSD(report)
  })

  //test an invalid zip
  mustFail("Fail a an XSD on a URL with an invalid XML and includes ", () => {
    val url = resources("library/mainscheme/library.xsd")
    val xml = getAsset("sample-library-invalid.xml")
    var report = verifyXsd(url, xml())
    INFO(report)
    getResultForXSD(report)
  })
})


/**********
  *******  SCHEMATRON
  ******/

runAsRivet(() => {
  //test an valid zip
  mustSucceed("Verify schematron in ZIP File, valid XML", () => {
    val schematron = getAsset("schematron.zip")
    val xml = getAsset("simple-input.xml")
    val schema = schemaFromByteArray("schematron/deep/deeper/includer1.sch", schematron(), ArchiveType.ZIP);
    var report = verifySchematron(schema, xml(), null)
    INFO(report)
    getResultForSchematron(report)
  })
  //test an invalid zip
  mustFail("Fail schematron in ZIP File, invalid XML", () => {
    val schematron = getAsset("schematron.zip")
    val xml = getAsset("simple-input-invalid.xml")
    val schema = schemaFromByteArray("schematron/deep/deeper/includer1.sch", schematron(), ArchiveType.ZIP);
    var report = verifySchematron(schema, xml(), null)
    INFO(report)
    getResultForSchematron(report)
  })
})

runAsRivet(() => {
  //test an valid zip
  mustSucceed("Verify schematron in JAR File, valid XML", () => {
    val schematron = getAsset("schematron.jar")
    val xml = getAsset("simple-input.xml")
    val schema = schemaFromByteArray("schematron/deep/deeper/includer1.sch", schematron(), ArchiveType.JAR);
    var report = verifySchematron(schema, xml(), null)
    INFO(report)
    getResultForSchematron(report)
  })
  //test an invalid zip
  mustFail("Fail schematron in JAR File, invalid XML", () => {
    val schematron = getAsset("schematron.jar")
    val xml = getAsset("simple-input-invalid.xml")
    val schema = schemaFromByteArray("schematron/deep/deeper/includer1.sch", schematron(), ArchiveType.JAR);
    var report = verifySchematron(schema, xml(), null)
    INFO(report)
    getResultForSchematron(report)
  })
})

runAsRivet(() => {
  //Verify a schematron zip on a URL with valid XML
  mustSucceed("Verify a schematron zip on a URL with valid XML ", () => {
    val url = resources("schematron.zip")
    val xml = getAsset("simple-input.xml")
    val schema = schemaFromURL("schematron/deep/deeper/includer1.sch", url, ArchiveType.ZIP);
    var report = verifySchematron(schema, xml(), null)
    INFO(report)
    getResultForSchematron(report)
  })

  //test an invalid zip
  mustFail("Fail a schematron zip on a URL with an invalid XML ", () => {
    val url = resources("schematron.zip")
    val xml = getAsset("simple-input-invalid.xml")
    val schema = schemaFromURL("schematron/deep/deeper/includer1.sch", url, ArchiveType.ZIP);
    var report = verifySchematron(schema, xml(), null)
    INFO(report)
    getResultForSchematron(report)
  })
})

runAsRivet(() => {
  //Verify a schematron zip on a URL with valid XML
  mustSucceed("Verify a schematron JAR on a URL with valid XML ", () => {
    val url = resources("schematron.jar")
    val xml = getAsset("simple-input.xml")
    val schema = schemaFromURL("schematron/deep/deeper/includer1.sch", url, ArchiveType.JAR);
    var report = verifySchematron(schema, xml(), null)
    INFO(report)
    getResultForSchematron(report)
  })

  //test an invalid zip
  mustFail("Fail a schematron JAR on a URL with an invalid XML ", () => {
    val url = resources("schematron.jar")
    val xml = getAsset("simple-input-invalid.xml")
    val schema = schemaFromURL("schematron/deep/deeper/includer1.sch", url, ArchiveType.JAR);
    var report = verifySchematron(schema, xml(), null)
    INFO(report)
    getResultForSchematron(report)
  })
})


runAsRivet(() => {
  //Verify a schematron zip on a URL with valid XML
  mustSucceed("Verify a schematron on a URL with valid XML and includes ", () => {
    val url = resources("schematron/deep/deeper/includer1.sch")
    val xml = getAsset("simple-input.xml")
    var report = verifySchematron(url, xml(), null)
    INFO(report)
    getResultForSchematron(report)
  })

  //test an invalid zip
  mustFail("Fail a schematron JAR on a URL with an invalid XML and includes ", () => {
    val url = resources("schematron/deep/deeper/includer1.sch")
    val xml = getAsset("simple-input-invalid.xml")
    var report = verifySchematron(url, xml(), null)
    INFO(report)
    getResultForSchematron(report)
  })
})


////----------------------------


//yes thats why I love scala
def mustFail(message: String, f: () => Unit) {
  try {
    f()
    ERROR("Assertion failed [" + message + "]")
    THROWLATER("Assertion Failed: " + message)
  } catch {
    case ex: Throwable => {
      INFO("Assertion Successful: " + message)
    }
  }
}

def mustSucceed(message: String, f: () => Unit) {
  try {
    f()
    INFO("Assertion Successful: " + message)
  } catch {
    case ex: Throwable => {
      ERROR("Assertion failed [" + message + "]", ex)
      THROWLATER("Assertion  Failed:" + message, ex)
    }
  }
}

def getResultForXSD(report: String) {
    if ((report contains "<error>") || (report contains "<fatalerror>")) {
      throw new Exception("XML has errors");
    }
}

def getResultForSchematron(report: String) {
    if (report contains "<svrl:failed-assert") {
      throw new Exception("XML has errors");
    }
}